package com.vira.{{ service.name }}.dto;

import com.fasterxml.jackson.annotation.JsonProperty;
import io.swagger.v3.oas.annotations.media.Schema;

import jakarta.validation.constraints.*;

{% for field in fields -%}
{% if field.javaType == 'LocalDateTime' or field.javaType == 'LocalDate' %}
import java.time.{{ field.javaType }};
{% elif field.javaType == 'BigDecimal' %}
import java.math.BigDecimal;
{% endif %}
{%- endfor %}

/**
 * Request DTO for {{ database.entity }} operations.
 * 
 * Used for creating and updating {{ database.entity.lower() }} entities.
 * Contains validation annotations to ensure data integrity.
 * 
 * @author {{ service.author }}
 * @version {{ service.version }}
 * @since {{ service.version }}
 */
@Schema(description = "Request object for {{ database.entity.lower() }} operations")
public class {{ database.entity }}Request {

{% for field in fields if not field.autoGenerated and not field.primaryKey %}
    /**
     * {{ field.description }}
     */
    @Schema(description = "{{ field.description }}", 
            {% if field.validation and field.validation.required -%}
            required = true,
            {% endif -%}
            {% if field.javaType == 'String' and field.validation and field.validation.maxLength -%}
            maxLength = {{ field.validation.maxLength }},
            {% endif -%}
            {% if field.validation and field.validation.min is defined -%}
            minimum = "{{ field.validation.min }}",
            {% endif -%}
            example = "{% if field.javaType == 'String' %}Sample {{ field.name | replace('_', ' ') }}{% elif field.javaType == 'BigDecimal' %}100.50{% elif field.javaType == 'Integer' %}1{% elif field.javaType == 'Long' %}1{% elif field.javaType == 'LocalDateTime' %}2024-01-15T10:30:00{% elif field.javaType == 'LocalDate' %}2024-01-15{% elif field.javaType == 'Boolean' %}true{% else %}sample{% endif %}")
    @JsonProperty("{{ field.name }}")
    
    {% if field.validation -%}
    {% if field.validation.required -%}
    @NotNull(message = "{{ field.name | replace('_', ' ') | title }} is required")
    {% endif -%}
    
    {% if field.javaType == 'String' -%}
    {% if field.validation.required -%}
    @NotBlank(message = "{{ field.name | replace('_', ' ') | title }} cannot be blank")
    {% endif -%}
    {% if field.validation.maxLength -%}
    @Size(max = {{ field.validation.maxLength }}, message = "{{ field.name | replace('_', ' ') | title }} cannot exceed {{ field.validation.maxLength }} characters")
    {% endif -%}
    {% endif -%}
    
    {% if field.javaType in ['BigDecimal', 'Integer', 'Long'] -%}
    {% if field.validation.min is defined -%}
    @DecimalMin(value = "{{ field.validation.min }}", message = "{{ field.name | replace('_', ' ') | title }} must be at least {{ field.validation.min }}")
    {% endif -%}
    {% if field.validation.max is defined -%}
    @DecimalMax(value = "{{ field.validation.max }}", message = "{{ field.name | replace('_', ' ') | title }} cannot exceed {{ field.validation.max }}")
    {% endif -%}
    {% endif -%}
    
    {% if field.javaType in ['LocalDateTime', 'LocalDate'] -%}
    {% if field.validation.future -%}
    @Future(message = "{{ field.name | replace('_', ' ') | title }} must be in the future")
    {% endif -%}
    {% if field.validation.past -%}
    @Past(message = "{{ field.name | replace('_', ' ') | title }} must be in the past")
    {% endif -%}
    {% endif -%}
    
    {% if field.validation.pattern -%}
    @Pattern(regexp = "{{ field.validation.pattern }}", message = "{{ field.name | replace('_', ' ') | title }} format is invalid")
    {% endif -%}
    
    {% if field.validation.email -%}
    @Email(message = "{{ field.name | replace('_', ' ') | title }} must be a valid email address")
    {% endif -%}
    {% endif -%}
    private {{ field.javaType }} {{ field.name | camelCase }};

{% endfor %}

    /**
     * Default constructor.
     */
    public {{ database.entity }}Request() {
    }

    /**
     * Constructor with all fields.
     */
    public {{ database.entity }}Request(
        {%- for field in fields if not field.autoGenerated and not field.primaryKey -%}
        {{ field.javaType }} {{ field.name | camelCase }}{% if not loop.last %}, {% endif %}
        {%- endfor -%}
    ) {
        {% for field in fields if not field.autoGenerated and not field.primaryKey -%}
        this.{{ field.name | camelCase }} = {{ field.name | camelCase }};
        {% endfor %}
    }

{% for field in fields if not field.autoGenerated and not field.primaryKey %}
    /**
     * Get {{ field.description.lower() }}.
     * 
     * @return {{ field.description.lower() }}
     */
    public {{ field.javaType }} get{{ field.name | pascalCase }}() {
        return {{ field.name | camelCase }};
    }

    /**
     * Set {{ field.description.lower() }}.
     * 
     * @param {{ field.name | camelCase }} {{ field.description.lower() }}
     */
    public void set{{ field.name | pascalCase }}({{ field.javaType }} {{ field.name | camelCase }}) {
        this.{{ field.name | camelCase }} = {{ field.name | camelCase }};
    }

{% endfor %}

    /**
     * Builder pattern for {{ database.entity }}Request.
     * 
     * @return builder instance
     */
    public static Builder builder() {
        return new Builder();
    }

    /**
     * Builder class for {{ database.entity }}Request.
     */
    public static class Builder {
        private {{ database.entity }}Request request = new {{ database.entity }}Request();

{% for field in fields if not field.autoGenerated and not field.primaryKey %}
        /**
         * Set {{ field.description.lower() }}.
         * 
         * @param {{ field.name | camelCase }} {{ field.description.lower() }}
         * @return builder instance
         */
        public Builder {{ field.name | camelCase }}({{ field.javaType }} {{ field.name | camelCase }}) {
            request.{{ field.name | camelCase }} = {{ field.name | camelCase }};
            return this;
        }

{% endfor %}
        /**
         * Build the request object.
         * 
         * @return {{ database.entity }}Request instance
         */
        public {{ database.entity }}Request build() {
            return request;
        }
    }

    /**
     * Check equality based on all fields.
     */
    @Override
    public boolean equals(Object obj) {
        if (this == obj) return true;
        if (obj == null || getClass() != obj.getClass()) return false;
        {{ database.entity }}Request that = ({{ database.entity }}Request) obj;
        
        {% for field in fields if not field.autoGenerated and not field.primaryKey -%}
        if ({{ field.name | camelCase }} != null ? !{{ field.name | camelCase }}.equals(that.{{ field.name | camelCase }}) : that.{{ field.name | camelCase }} != null) return false;
        {% endfor %}
        
        return true;
    }

    /**
     * Generate hash code based on all fields.
     */
    @Override
    public int hashCode() {
        int result = 0;
        {% for field in fields if not field.autoGenerated and not field.primaryKey -%}
        result = 31 * result + ({{ field.name | camelCase }} != null ? {{ field.name | camelCase }}.hashCode() : 0);
        {% endfor %}
        return result;
    }

    /**
     * String representation of the request.
     */
    @Override
    public String toString() {
        return "{{ database.entity }}Request{" +
            {% for field in fields if not field.autoGenerated and not field.primaryKey -%}
            "{{ field.name | camelCase }}=" + {{ field.name | camelCase }} +
            {% if not loop.last %}", " +{% endif %}
            {% endfor %}
            '}';
    }
} 