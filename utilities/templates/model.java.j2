package com.vira.{{ service.name }}.model;

import jakarta.persistence.*;
import jakarta.validation.constraints.*;
import org.hibernate.annotations.CreationTimestamp;
import org.hibernate.annotations.UpdateTimestamp;

{% for field in fields -%}
{% if field.javaType == 'LocalDateTime' or field.javaType == 'LocalDate' %}
import java.time.{{ field.javaType }};
{% elif field.javaType == 'BigDecimal' %}
import java.math.BigDecimal;
{% endif %}
{%- endfor %}

/**
 * {{ database.entity }} entity representing {{ database.table }} table.
 * 
 * {{ service.description }}
 * 
 * @author {{ service.author }}
 * @version {{ service.version }}
 * @since {{ service.version }}
 */
@Entity
@Table(name = "{{ database.table }}")
public class {{ database.entity }} {

{% for field in fields %}
    /**
     * {{ field.description }}
     */
    {% if field.primaryKey -%}
    @Id
    {% if field.autoGenerated -%}
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    {% endif -%}
    {% endif -%}
    
    {% if field.name == 'created_at' and field.autoGenerated -%}
    @CreationTimestamp
    {% elif field.name == 'updated_at' and field.updateOnModify -%}
    @UpdateTimestamp
    {% endif -%}
    
    @Column(name = "{{ field.name }}"
    {%- if not field.nullable %}, nullable = false{% endif -%}
    {%- if field.validation and field.validation.maxLength %}, length = {{ field.validation.maxLength }}{% endif -%}
    {%- if field.validation and field.validation.precision %}, precision = {{ field.validation.precision }}{% endif -%}
    {%- if field.validation and field.validation.scale %}, scale = {{ field.validation.scale }}{% endif -%}
    )
    
    {% if field.validation -%}
    {% if field.validation.required -%}
    @NotNull(message = "{{ field.name | replace('_', ' ') | title }} is required")
    {% endif -%}
    {% if field.validation.maxLength -%}
    @Size(max = {{ field.validation.maxLength }}, message = "{{ field.name | replace('_', ' ') | title }} cannot exceed {{ field.validation.maxLength }} characters")
    {% endif -%}
    {% if field.validation.min is defined -%}
    @DecimalMin(value = "{{ field.validation.min }}", message = "{{ field.name | replace('_', ' ') | title }} must be at least {{ field.validation.min }}")
    {% endif -%}
    {% if field.javaType == 'String' and field.validation.sanitize -%}
    // Note: This field will be sanitized for security
    {% endif -%}
    {% endif -%}
    
    {% if field.foreignKey -%}
    // Foreign key relationship to {{ field.foreignKey.table }}.{{ field.foreignKey.field }}
    {% endif -%}
    private {{ field.javaType }} {{ field.name | camelCase }};

{% endfor %}

    /**
     * Default constructor for JPA.
     */
    public {{ database.entity }}() {
    }

    /**
     * Constructor with required fields.
     */
    public {{ database.entity }}(
        {%- for field in fields if field.validation and field.validation.required and not field.autoGenerated -%}
        {{ field.javaType }} {{ field.name | camelCase }}{% if not loop.last %}, {% endif %}
        {%- endfor -%}
    ) {
        {% for field in fields if field.validation and field.validation.required and not field.autoGenerated -%}
        this.{{ field.name | camelCase }} = {{ field.name | camelCase }};
        {% endfor %}
    }

{% for field in fields %}
    /**
     * Get {{ field.description.lower() }}.
     * 
     * @return {{ field.description.lower() }}
     */
    public {{ field.javaType }} get{{ field.name | pascalCase }}() {
        return {{ field.name | camelCase }};
    }

    /**
     * Set {{ field.description.lower() }}.
     * 
     * @param {{ field.name | camelCase }} {{ field.description.lower() }}
     */
    public void set{{ field.name | pascalCase }}({{ field.javaType }} {{ field.name | camelCase }}) {
        this.{{ field.name | camelCase }} = {{ field.name | camelCase }};
    }

{% endfor %}

    /**
     * Check equality based on ID.
     */
    @Override
    public boolean equals(Object obj) {
        if (this == obj) return true;
        if (obj == null || getClass() != obj.getClass()) return false;
        {{ database.entity }} that = ({{ database.entity }}) obj;
        {% for field in fields if field.primaryKey -%}
        return {{ field.name | camelCase }} != null && {{ field.name | camelCase }}.equals(that.{{ field.name | camelCase }});
        {% endfor %}
    }

    /**
     * Generate hash code based on ID.
     */
    @Override
    public int hashCode() {
        {% for field in fields if field.primaryKey -%}
        return {{ field.name | camelCase }} != null ? {{ field.name | camelCase }}.hashCode() : 0;
        {% endfor %}
    }

    /**
     * String representation of the entity.
     */
    @Override
    public String toString() {
        return "{{ database.entity }}{" +
            {% for field in fields -%}
            "{{ field.name | camelCase }}=" + {{ field.name | camelCase }} +
            {% if not loop.last %}", " +{% endif %}
            {% endfor %}
            '}';
    }
} 